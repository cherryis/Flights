{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\n//import { error } from 'console';\nlet RegisterPassengerComponent = class RegisterPassengerComponent {\n  constructor(passengerService, fb, authService, router) {\n    this.passengerService = passengerService;\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.form = this.fb.group({\n      email: ['', Validators.compose([Validators.required, Validators.minLength(1), Validators.maxLength(100)])],\n      firstName: ['', Validators.compose([Validators.required, Validators.minLength(1), Validators.maxLength(35)])],\n      lastName: ['', Validators.compose([Validators.required, Validators.minLength(1), Validators.maxLength(35)])],\n      isFemale: [true, Validators.required]\n    });\n  }\n  checkPassenger() {\n    const email = this.form.get('email')?.value; // Extract email from the form\n    // Check if email is available\n    if (email) {\n      const params = {\n        email: email\n      }; // Correct way to create params object\n      this.passengerService.findPassenger(params).subscribe(() => this.login(email), error => {\n        if (error.status != 404) console.error(error);\n      });\n      //error => {console.error(error) });\n    }\n  }\n\n  register() {\n    if (this.form.invalid) return;\n    console.log(\"Form Values:\", this.form.value);\n    const email = this.form.get('email')?.value; // Extract email from the form\n    // Check if email is available\n    if (email) {\n      this.passengerService.registerPassenger({\n        body: this.form.value\n      }).subscribe(() => this.login(email), error => console.error(error)); // Correct way to pass email\n    }\n  }\n\n  login(email) {\n    this.authService.loginUser({\n      email: email\n    });\n    this.router.navigate(['/search-flights']);\n  }\n};\nRegisterPassengerComponent = __decorate([Component({\n  selector: 'app-register-passenger',\n  templateUrl: './register-passenger.component.html',\n  styleUrls: ['./register-passenger.component.css']\n})], RegisterPassengerComponent);\nexport { RegisterPassengerComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","RegisterPassengerComponent","constructor","passengerService","fb","authService","router","group","email","compose","required","minLength","maxLength","firstName","lastName","isFemale","checkPassenger","form","get","value","params","findPassenger","subscribe","login","error","status","console","register","invalid","log","registerPassenger","body","loginUser","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Soonae\\Desktop\\Flights\\ClientApp\\src\\app\\register-passenger\\register-passenger.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { PassengerService } from './../api/services/passenger.service';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { AuthService } from '../auth/auth.service';\r\nimport { Router } from '@angular/router';\r\n//import { error } from 'console';\r\n\r\n@Component({\r\n  selector: 'app-register-passenger',\r\n  templateUrl: './register-passenger.component.html',\r\n  styleUrls: ['./register-passenger.component.css']\r\n})\r\nexport class RegisterPassengerComponent {\r\n\r\n  constructor(private passengerService: PassengerService,\r\n    private fb: FormBuilder, private authService: AuthService,\r\n    private router: Router) { }\r\n\r\n  form = this.fb.group({\r\n    email: ['', Validators.compose([Validators.required, Validators.minLength(1), Validators.maxLength(100)])],\r\n    firstName: ['', Validators.compose([Validators.required, Validators.minLength(1), Validators.maxLength(35)])],\r\n    lastName: ['', Validators.compose([Validators.required, Validators.minLength(1), Validators.maxLength(35)])],\r\n    isFemale: [true, Validators.required]\r\n  })\r\n\r\n  checkPassenger(): void {\r\n    const email = this.form.get('email')?.value;  // Extract email from the form\r\n\r\n    // Check if email is available\r\n    if (email) {\r\n      const params = { email: email };  // Correct way to create params object\r\n      this.passengerService.findPassenger(params)\r\n        .subscribe(() => this.login(email),\r\n          error => { if (error.status != 404) console.error(error) });\r\n      //error => {console.error(error) });\r\n\r\n    }\r\n  }\r\n\r\n  register() {\r\n    if (this.form.invalid)\r\n      return;\r\n\r\n    console.log(\"Form Values:\", this.form.value);\r\n    const email = this.form.get('email')?.value;  // Extract email from the form\r\n\r\n  // Check if email is available\r\n    if (email) {\r\n      this.passengerService.registerPassenger({ body: this.form.value })\r\n        .subscribe(() => this.login(email),\r\n        error => console.error(error));  // Correct way to pass email\r\n    }\r\n  }\r\n\r\n  private login(email: string) {\r\n    this.authService.loginUser({ email: email });\r\n\r\n    this.router.navigate(['/search-flights']);\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}